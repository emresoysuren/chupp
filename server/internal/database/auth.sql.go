// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.19.1
// source: auth.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createAuth = `-- name: CreateAuth :one
INSERT INTO auth (user_id, created_at, updated_at, password)
VALUES ($1, NOW(), NOW(), $2)
RETURNING user_id, created_at, updated_at, password
`

type CreateAuthParams struct {
	UserID   uuid.UUID
	Password string
}

func (q *Queries) CreateAuth(ctx context.Context, arg CreateAuthParams) (Auth, error) {
	row := q.db.QueryRowContext(ctx, createAuth, arg.UserID, arg.Password)
	var i Auth
	err := row.Scan(
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Password,
	)
	return i, err
}

const getAuth = `-- name: GetAuth :one
SELECT user_id, created_at, updated_at, password FROM auth
WHERE user_id = $1
`

func (q *Queries) GetAuth(ctx context.Context, userID uuid.UUID) (Auth, error) {
	row := q.db.QueryRowContext(ctx, getAuth, userID)
	var i Auth
	err := row.Scan(
		&i.UserID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Password,
	)
	return i, err
}
